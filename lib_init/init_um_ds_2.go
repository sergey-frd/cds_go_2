package lib_init

import (   
    "fmt"
//	"log"
	"sort"
    "encoding/json"
//  "time"
//    "github.com/valyala/fastjson"
//    "os" 
//    "github.com/boltdb/bolt"
//    "errors"

//    "strconv"
//  // "io/ioutil"
//  //"bytes"
//  //"runtime"
//  //"encoding/gob"
//  
//  "math/rand"
//
//    L "cds_go_2/lib"
    S "cds_go_2/config"
)


//    c_time    time.Time,

//----------------------------------------------
func Init_Um_Ds2(
    json_go     S.AutoGenerated,
    byteValues  []byte, 
    data        map[string]map[string]string,
    TotalDict   map[string]map[string]float64,
    um          S.User_Media_STC,
    )  (S.Result_STC, float64, error) {

    //p := fmt.Println

    var err              error
    var Um_Total_Cost    float64
    var ud               S.Um_Ds_STC
    var rs               S.Result_STC



    Um_Total_Cost = 0
    ////---------------------------------------------------
    tbl_name   := "Um_Ds"
    var keys []string
    for k, _ := range data[tbl_name] {
        keys = append(keys, k)
    } // for k, v
    sort.Strings(keys)  // or sort.Ints(keys), sort.Sort(...), etc., per <K>

    n := 0
    //nnn := 0
    for _, k := range keys  {
        n++
        v := data[tbl_name][k]
        //fmt.Println(n,k, "=>", v)
       //.................................................
       byt_k := []byte(k)
       //err := json.Unmarshal(byt_ds, &k_Ds)
       err = json.Unmarshal(byt_k, &ud.Um_ds_key)
       if err != nil {
           fmt.Println("There was an error:", err)
       }
       
       byt_v := []byte(v)
       err = json.Unmarshal(byt_v, &ud.Slot_Price)
       if err != nil {
           fmt.Println("There was an error:", err)
       }
    
        if ud.Um_ds_key.UsMd != um.UsMd { continue }

        rs.Result_key.UsMd   = um.UsMd 
        rs.Result_key.Ds_key = ud.Um_ds_key.Ds_key 
        fmt.Println("rs =", rs)


        //Total_Slot,Total_Cost,err  := base_alloc(json_go, data, um, ud,);    __err_panic(err)
        //_,Total_Cost,err  := base_alloc(json_go, data, um, ud, rs,);    __err_panic(err)
        _,Total_Cost,err  := base_alloc(json_go, data, um, ud, );    __err_panic(err)

        // fmt.Println("Total_Slot =", Total_Slot)
        // fmt.Println("Total_Cost =", Total_Cost)

        ud.Slot_Price = Total_Cost

        data["Um_Ds"][k] = fmt.Sprintf("%.6f", ud.Slot_Price)  

        Um_Total_Cost += Total_Cost

        fmt.Println(n,"ud =", ud)
        // if n >= 2 { break }

    } //for _, k := range keys  



    return  rs,Um_Total_Cost,err

} // func alloc_ow
