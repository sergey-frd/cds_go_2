package lib_init

import (   
         "strconv"
    "fmt"
//    "sort"

//     "encoding/json"
// //        "math"
// //        "time"
// //
// //    "log"
// //    "github.com/valyala/fastjson"
// //    "os" 
// //    "github.com/boltdb/bolt"
// //    "errors"
// 
// //  // "io/ioutil"
// //  //"bytes"
// //  //"runtime"
// //  //"encoding/gob"
// //  
// //  "math/rand"

// 
//   L "cds_go_2/lib"
     S "cds_go_2/config"
     G "cds_go_2/lib_gen"
)

// type Deal struct {
//     People   int
//     P_Rating float64
//     Id       int
//     P_id     int
// }
// 
// type Deals []Deal
// 
// func (d Deals) Len() int           { return len(d) }
// func (d Deals) Less(i, j int) bool { return d[i].People > d[j].People }
// func (d Deals) Swap(i, j int)      { d[i], d[j] = d[j], d[i] }



     
//----------------------------------------------
func Get_Price_Array(
    Ds            S.Digital_Signage_STC,
    json_go       S.AutoGenerated,
    data          map[string]map[string]string,
    inxArr[]      int,
    ) ( 
    map[S.Time_Int_KEY]S.Time_Int_STC,
    []string,
     error) {

    var err error
    //Ta_List := make([]S.Time_Int_STC, 24)
    //a_List := make([]S.Time_Int_Str_STC, 24)
    Ta_List := make([]string, 24)



    //func (d Ta_List) Len() int           { return len(d) }

    //type Ta_List []S.Time_Int_STC
    //Ta_List := make([]S.Time_Int_STC, 24)

    //deals := Deals{
    //    {100, 0.2, 0, 7 },
    //    {110, 0.3, 1, 6 },
    //    {190, 0.4, 0, 5 },
    //    {200, 0.3, 0, 8 },
    //    {400, 0.5, 4, 3 },
    //}
    //
    //fmt.Println(deals)
    //
    //sort.Sort(deals)
    //
    //for _, d := range deals {
    //    fmt.Println(d)
    //}

    var ta     S.Time_Int_STC
    var tas    string
    var Slot   int

    Time_Interval_Counter  := json_go.Base.TimeIntervalCounter

    var Ta_Map       = make(map[S.Time_Int_KEY]S.Time_Int_STC)



    n := 0
    for h := 0; h < Time_Interval_Counter; h++ {

        Slot = inxArr[h]

        if Slot       == 0 {
            //fmt.Println(n,"continue 1")
            continue
        }

        TI_People,TI_Price,slots,slot_price,err := G.Get_Price_Slots(h,Slot,Ds,json_go,data,);  __err_panic(err)

        if slot_price == 0 {
            //fmt.Println(n,"continue 2")
            continue
        }


        ta.Time_int_key.D_Sign_People    = TI_People
        ta.Time_int_key.Slot_Price       = slot_price
        ta.Time_int_key.ID_Time_Interval = h

        //ta.ID_Time_Interval             = h
        ta.Price                        = TI_Price
        ta.Slots                        = slots

        //tas.D_Sign_People    = strconv.Itoa(TI_People )
        //tas.ID_Time_Interval = strconv.Itoa(h         )
        //tas.Slot_Price       = fmt.Sprintf("%f", slot_price)
        //tas.Price            = strconv.Itoa(TI_Price  )
        //tas.Slots            = strconv.Itoa(slots     )


        tas = strconv.Itoa(10000 - TI_People ) + "," +
             strconv.Itoa(TI_People        ) + "," +
             strconv.Itoa(h         ) + "," +
             fmt.Sprintf("%f", slot_price) + "," +
             strconv.Itoa(TI_Price  ) + "," +
             strconv.Itoa(slots     )


        //fmt.Println(n,h,TI_People,TI_Price,slots,slot_price)
        //fmt.Println(h,ta)
        Ta_Map[ta.Time_int_key] = ta

        
        //Ta_List = append(Ta_List, ta.S.Time_Int_STC)
        //Ta_List = append(Ta_List, ta)
        Ta_List[n] = tas
        n++
        //fmt.Println("Ta_List =",Ta_List)

    } //  for h := 0; h < Time_Interval_Counter; h++


	// sort.Float64s(s)
	// fmt.Println(s)

    //fmt.Println("Ta_Map =",Ta_Map)
    //fmt.Println("Ta_Map len =",len(Ta_Map))


    //fmt.Println("Ta_List =",Ta_List)
    //fmt.Println("Ta_Listlen =",len(Ta_List))


    //func (d Ta_List) Len() (int) { return len(d) }
    //func (d Ta_List) Len()  return len(d) 

    //func  (d Ta_Map) Len() (int) {
    //   return len(Ta_Map) 
    //}
    //func  (d Ta_Map) Len() (int)   return len(d) 

    //func (d Ta_Map) Less(i, j int) bool { return d[i]S.ta.Time_int_key.D_Sign_People > d[j]S.ta.Time_int_key.D_Sign_People}
    //func (d Ta_Map) Swap(i, j int)      { d[i], d[j] = d[j], d[i] }




    //sort.Sort(Ta_List)
    
    // for _, d := range Ta_List {
    //     fmt.Println("Ta_List =",d)
    // }


    return Ta_Map, Ta_List, err

} // func allocow

