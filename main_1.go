package main

import (   
    "os" 
    //	"errors"
    "log"
    "fmt"
    "github.com/valyala/fastjson"
    "io/ioutil"
    //"path"
    "path/filepath"

    L "cds_go_2/lib"
    X "cds_go_2/lib_xcls"
//    A "cds_go_2/lib_alloc"
    G "cds_go_2/lib_gen"
    I "cds_go_2/lib_init"

    "encoding/json"
    //"encoding/gob"
    S "cds_go_2/config"

)

//---------------------------------------------------------------
func __err_panic(err error) {
	if err != nil {
		log.Fatal(err)
		panic(err)
	}
}

// //---------------------------------------------------------------
// func handlingCountryLine(sheet_Name string,
//                          index_Row int,
//                          index_Cells int, 
//                          text_Cells string) (err error) {
// 
// 
//     fmt.Printf("%s %d %d %s\n",
//         sheet_Name,
//         index_Row,
//         index_Cells, 
//         text_Cells)
// 
//     return 
// }


func ExampleValue_MarshalTo(byteValues []byte) {

	//s := `{
	//	"name": "John",
	//	"items": [
	//		{
	//			"key": "foo",
	//			"value": 123.456,
	//			"arr": [1, "foo"]
	//		},
	//		{
	//			"key": "bar",
	//			"field": [3, 4, 5]
	//		}
	//	]
	//}`

	s := string(byteValues)
	//s := byteValues

	var p fastjson.Parser
	v, err := p.Parse(s)
	if err != nil {
		log.Fatalf("cannot parse json: %s", err)
	}

	// Marshal items.0 into newly allocated buffer.
	buf := v.Get("items", "0").MarshalTo(nil)
	fmt.Printf("items.0 = %s\n", buf)

	// Re-use buf for marshaling items.1.
	buf = v.Get("items", "1").MarshalTo(buf[:0])
	fmt.Printf("items.1 = %s\n", buf)

	// Output:
	// items.0 = {"key":"foo","value":123.456,"arr":[1,"foo"]}
	// items.1 = {"key":"bar","field":[3,4,5]}
}

//---------------------------------------------------------------
func main() {

    p := fmt.Println

    p("")
    p("")

    var data            = map[string]map[string]string{}
    //var Ow_Um_Map       = make(map[string]float64)
    //var Ow_UmNbDsTi_Map = make(map[string]float64)
    //var Ow_UmNbDs_Map   = make(map[string]float64)
    //var Payd_Slots_Map  = make(map[string]float64)
    //var Free_Slots_Map  = make(map[string]float64)

    var json_go  S.AutoGenerated


    proj_dir, err := os.Getwd();  __err_panic(err) 
    p("proj_dir =", proj_dir)

    // dir_proj_dir :=  filepath.Dir (proj_dir) 
    // p("dir_proj_dir =", dir_proj_dir)

	p(filepath.Join(proj_dir,"config", "t_4.json"))

    //jsonFilePath := "c:\\Users\\user\\go\\src\\data_xcls\\config\\t_4.json"
    jsonFilePath := filepath.Join(proj_dir,"config", "t_4.json")

    //fmt.Println("jsonFilePath =", jsonFilePath)


    //============================================  
    //return

    jsonFile, err := os.Open(jsonFilePath)
    if err != nil {
    fmt.Println(err)
    }
    defer jsonFile.Close()

    // read our opened xmlFile as a byte array.
    byteValues, _ := ioutil.ReadAll(jsonFile)

    dbFileName, err := L.GetDbName(byteValues);  __err_panic(err) 

    //fmt.Println(
    json.Unmarshal(byteValues, &json_go)
    // p("json_go=", json_go)
    // p("json_go.Base=", json_go.Base)
    // p("json_go.Base.ProjectName =", json_go.Base.ProjectName)
    // p("json_go.DBTableList=", json_go.DBTableList)
    // p("json_go.DBTableList[0] =", json_go.DBTableList[0])

    //------------------------------------------------------------------------------
    CASE_XCLS_2_DB := fastjson.GetString(byteValues, "Base", "CASE_XCLS_2_DB")
    fmt.Printf("CASE_XCLS_2_DB = %s\n", CASE_XCLS_2_DB)
    if CASE_XCLS_2_DB == "Y" {
        p("********** CASE_XCLS_2_DB *********************")
        //fmt.Println("call X.Demo_Xcls(jsonFilePath) START")
        // X.Load_Xcls(proj_dir, byteValues)
        X.Load_Xcls( byteValues)
    }



    //------------------------------------------------------------------------------
    CASE_LOAD_DICT := fastjson.GetString(byteValues, "Base", "CASE_LOAD_DICT")
    fmt.Printf("CASE_LOAD_DICT = %s\n", CASE_LOAD_DICT)
    if CASE_LOAD_DICT == "Y" {

        p("********** CASE_LOAD_DICT *********************")
    	//L.LoadDict(dbFileName,data)
    	L.LoadDict(byteValues,json_go,data)
    }

    //------------------------------------------------------------------------------
    CASE_GEN_ALL_FILES := fastjson.GetString(byteValues, "Base", "CASE_GEN_ALL_FILES")
    fmt.Printf("CASE_GEN_ALL_FILES = %s\n", CASE_GEN_ALL_FILES)
    if CASE_GEN_ALL_FILES == "Y" {

        p("********** CASE_GEN_ALL_FILES *********************")
        //L.GenAllFiles(byteValues)

        //.................................................
        p("CASE_GEN_ALL_FILES Digital_Signage")
        err = L.Gen_Ds_Bucket(byteValues, "Digital_Signage",data); __err_panic(err)
        err = L.LoadDict2(byteValues, data, "Digital_Signage");    __err_panic(err)

        p("CASE_GEN_ALL_FILES User_Media")
        err = L.Gen_Um_Bucket(byteValues, "User_Media", data);     __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "User_Media");     __err_panic(err)

        //.................................................
        //err = L.Print_DB_Bucket(byteValues, "Price");             __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "Time_Interval");     __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "Media");             __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "User_Media");        __err_panic(err)


        //data["Ow_Um"]       = make(map[string]string)
        //data["Ow_UmNbDs"]   = make(map[string]string)
        //data["Ow_UmNbDsTi"] = make(map[string]string)
        //data["Payd_Slots"]  = make(map[string]string)
        data["Free_Slots"]  = make(map[string]string)

        p("CASE_GEN_ALL_FILES Gen_Lvl_Um")
        err = G.Gen_Lvl_Um(byteValues,data,);  __err_panic(err)

        p(" Save_Data_Map Free_Slots")
        //p("data[Free_Slots] =", data["Free_Slots"])
        err = L.Save_Data_Map(byteValues, "Free_Slots"  , data ); __err_panic(err)

        p("LoadDict2 Free_Slots")
        err = L.LoadDict2(byteValues, data, "Free_Slots" ); __err_panic(err)     
        //err = L.Print_DB_Bucket(byteValues, "Free_Slots");             __err_panic(err)

        //!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //return 


        // // L.Gen_UmNbDtTi_Bucket(byteValues, 
        // //     data            ,
        // //     Ow_Um_Map       ,
        // //     Ow_UmNbDsTi_Map ,
        // //     Ow_UmNbDs_Map   ,
        // //     Payd_Slots_Map  ,
        // //     Free_Slots_Map  ,
        // //     )
        // // __err_panic(err)
        // 
        // 
        // // fmt.Println("main Ow_Um_Map =", Ow_Um_Map)
        // // fmt.Println("main Ow_UmNbDs_Map =", Ow_UmNbDs_Map)
        // // fmt.Println("main Ow_UmNbDsTi_Map =", Ow_UmNbDsTi_Map)
        // 
        // // fmt.Println("main Payd_Slots_Map =", Payd_Slots_Map)
        // 
        // 
        // // for Ow_UmNbDs_Map_Key, v := range Ow_UmNbDs_Map {
        // //     fmt.Println("main Ow_UmNbDs_Map_Key =", Ow_UmNbDs_Map_Key)
        // //     fmt.Println("main v =", v)
        // // } // for Ow_UmNbDs_Map_Key
        // 
        // 
        // err = L.Save_Map(byteValues, "Ow_Um"       , Ow_Um_Map      ); __err_panic(err)
        // err = L.Save_Map(byteValues, "Ow_UmNbDs"   , Ow_UmNbDs_Map  ); __err_panic(err)
        // err = L.Save_Map(byteValues, "Ow_UmNbDsTi" , Ow_UmNbDsTi_Map); __err_panic(err)
        // err = L.Save_Map(byteValues, "Payd_Slots"  , Payd_Slots_Map ); __err_panic(err)
        // err = L.Save_Map(byteValues, "Free_Slots"  , Free_Slots_Map ); __err_panic(err)
        // 
        //           
        // //err = L.LoadDict_Dbg(byteValues, data, "Ow_Um")          
        // err = L.LoadDict2(byteValues, data, "Ow_Um"      );  __err_panic(err)          
        // err = L.LoadDict2(byteValues, data, "Ow_UmNbDs"  );  __err_panic(err)      
        // err = L.LoadDict2(byteValues, data, "Ow_UmNbDsTi");  __err_panic(err)   
        // err = L.LoadDict2(byteValues, data, "Payd_Slots" );  __err_panic(err)     
        // err = L.LoadDict2(byteValues, data, "Free_Slots" );  __err_panic(err)     

        // fmt.Println("main data[Ow_Um]       =", data["Ow_Um"]);       __err_panic(err)
        // fmt.Println("main data[Ow_UmNbDs]   =", data["Ow_UmNbDs"]);   __err_panic(err)
        // fmt.Println("main data[Ow_UmNbDsTi] =", data["Ow_UmNbDsTi"]); __err_panic(err)


    } // if CASE_GEN_ALL_FILES == "Y" {


    //------------------------------------------------------------------------------
    CASE_INIT := fastjson.GetString(byteValues, "Base", "CASE_INIT")
    fmt.Printf("CASE_INIT = %s\n", CASE_INIT)
    if CASE_INIT == "Y" {

        p("********** CASE_INIT *********************")
        err = L.LoadDict2(byteValues, data, "Digital_Signage");   __err_panic(err)
        err = L.LoadDict2(byteValues, data, "User_Media"     );   __err_panic(err)

        //err = L.LoadDict2(byteValues, data, "Ow_Um"      ); __err_panic(err)          
        //err = L.LoadDict2(byteValues, data, "Ow_UmNbDs"  ); __err_panic(err)      
        //err = L.LoadDict2(byteValues, data, "Ow_UmNbDsTi"); __err_panic(err)   
        //err = L.LoadDict2(byteValues, data, "Payd_Slots" ); __err_panic(err)     
        err = L.LoadDict2(byteValues, data, "Free_Slots" ); __err_panic(err)     



        TotalDict := make(map[string]map[string]float64) 

        data["Paid_Slots"]  = make(map[string]string)

        //TotalDict["Ow_Day"]    = make(map[string]float64)
        TotalDict["Ow_Day_Ds"]  = make(map[string]float64)
        TotalDict["Sum_Ow_Ds"]  = make(map[string]float64)
        TotalDict["Paid_Ow_Ds"] = make(map[string]float64)

        err = I.Init_Um(byteValues,data,TotalDict,);  __err_panic(err)
        err = L.Save_Data_Map(byteValues, "Paid_Slots"  , data ); __err_panic(err)

    

    } // if CASE_INIT == "Y" {

    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    CASE_DB_PRINT_ALL := fastjson.GetString(byteValues, "Base", "CASE_DB_PRINT_ALL")
    fmt.Printf("CASE_DB_PRINT_ALL = %s\n", CASE_DB_PRINT_ALL)

    if CASE_DB_PRINT_ALL == "Y" {
        p("********** CASE_DB_PRINT_ALL *********************")
    	L.Buckets(byteValues,dbFileName)
    }

    CASE_MAP_PRINT_ALL := fastjson.GetString(byteValues, "Base", "CASE_MAP_PRINT_ALL")
    if CASE_MAP_PRINT_ALL == "Y" {
        p("********** CASE_MAP_PRINT_ALL *********************")
        //err = L.Print_Map(byteValues,data,TotalDict,"City",);  __err_panic(err)
        err = L.Print_Map(json_go,data,);  __err_panic(err)
    }
    //fmt.Println(data["City"])
    err = L.Print_Map_Table(json_go,data,"City");  __err_panic(err)
    err = L.Print_Map_Table(json_go,data,"Neighborhoods");  __err_panic(err)
    err = L.Print_Map_Table(json_go,data,"Digital_Signage");  __err_panic(err)


    p("**** main_1.go ENDED")
    return




}
