package main

import (   
    "os" 
    //	"errors"
    "log"
    "fmt"
    "github.com/valyala/fastjson"
    "io/ioutil"
    //"path"
    "path/filepath"

    L "cds_go_2/lib"
    X "cds_go_2/lib_xcls"
//    A "cds_go_2/lib_alloc"
    G "cds_go_2/lib_gen"
    I "cds_go_2/lib_init"

    "encoding/json"
    //"encoding/gob"
    S "cds_go_2/config"    
    // "net"


)




//---------------------------------------------------------------
func __err_panic(err error) {
	if err != nil {
		log.Fatal(err)
		panic(err)
	}
}


//---------------------------------------------------------------
func main() {

    p := fmt.Println

    p("")
    p("")




    var data            = map[string]map[string]string{}


    var json_go  S.AutoGenerated


    proj_dir, err := os.Getwd();  __err_panic(err) 
    p("proj_dir =", proj_dir)

    // dir_proj_dir :=  filepath.Dir (proj_dir) 
    // p("dir_proj_dir =", dir_proj_dir)

	p(filepath.Join(proj_dir,"config", "t_4.json"))

    //jsonFilePath := "c:\\Users\\user\\go\\src\\data_xcls\\config\\t_4.json"
    jsonFilePath := filepath.Join(proj_dir,"config", "t_4.json")

    //fmt.Println("jsonFilePath =", jsonFilePath)


    //============================================  
    //return

    jsonFile, err := os.Open(jsonFilePath)
    if err != nil {
    fmt.Println(err)
    }
    defer jsonFile.Close()

    // read our opened xmlFile as a byte array.
    byteValues, _ := ioutil.ReadAll(jsonFile)

    dbFileName, err := L.GetDbName(byteValues);  __err_panic(err) 

    json.Unmarshal(byteValues, &json_go)

    //------------------------------------------------------------------------------
    CASE_XCLS_2_DB := fastjson.GetString(byteValues, "Base", "CASE_XCLS_2_DB")
    fmt.Printf("CASE_XCLS_2_DB = %s\n", CASE_XCLS_2_DB)
    if CASE_XCLS_2_DB == "Y" {
        p("********** CASE_XCLS_2_DB *********************")
        //fmt.Println("call X.Demo_Xcls(jsonFilePath) START")
        // X.Load_Xcls(proj_dir, byteValues)
        X.Load_Xcls( byteValues)
    }


    CASE_LOAD_DICT := fastjson.GetString(byteValues, "Base", "CASE_LOAD_DICT")
    fmt.Printf("CASE_LOAD_DICT = %s\n", CASE_LOAD_DICT)
    if CASE_LOAD_DICT == "Y" {

        p("********** CASE_LOAD_DICT *********************")
    	//L.LoadDict(dbFileName,data)
    	L.LoadDict(byteValues,json_go,data)
    }

    //------------------------------------------------------------------------------
    CASE_GEN_ALL_FILES := fastjson.GetString(byteValues, "Base", "CASE_GEN_ALL_FILES")
    fmt.Printf("CASE_GEN_ALL_FILES = %s\n", CASE_GEN_ALL_FILES)
    if CASE_GEN_ALL_FILES == "Y" {

        p("********** CASE_GEN_ALL_FILES *********************")
        //L.GenAllFiles(byteValues)

        //.................................................
        p("CASE_GEN_ALL_FILES Digital_Signage")
        err = L.Gen_Ds_Bucket(json_go,byteValues, "Digital_Signage",data); __err_panic(err)
        err = L.LoadDict2(byteValues, data, "Digital_Signage");            __err_panic(err)

        p("CASE_GEN_ALL_FILES User_Media")
        err = L.Gen_Um_Bucket(json_go,byteValues, "User_Media", data);     __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "User_Media");             __err_panic(err)

        //.................................................
        //err = L.Print_DB_Bucket(byteValues, "Price");             __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "Time_Interval");     __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "Media");             __err_panic(err)
        //err = L.Print_DB_Bucket(byteValues, "User_Media");        __err_panic(err)


        //data["Ow_Um"]       = make(map[string]string)
        //data["Ow_UmNbDs"]   = make(map[string]string)
        //data["Ow_UmNbDsTi"] = make(map[string]string)
        //data["Payd_Slots"]  = make(map[string]string)
        //data["Free_Slots"]  = make(map[string]string)
        //data["Ds_Ti"]       = make(map[string]string)
        data["Base_Ti"]     = make(map[string]string)
        data["Um_Ds"]       = make(map[string]string)

        err = G.Gen_Ds_Ti2(json_go,data,);  __err_panic(err)
        //err = L.Save_Data_Map(byteValues, "Base_Ti"  , data ); __err_panic(err)

        err = G.Gen_Used_Ti(json_go,data,);  __err_panic(err)
        
        err = L.Save_Data_Map(byteValues,       "Base_Ti"  , data ); __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "Base_Ti");     __err_panic(err)

        err = G.Gen_Lvl_Um3(byteValues,data,);  __err_panic(err)
        
        err = L.Save_Data_Map(byteValues,       "Um_Ds"  , data ); __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "Um_Ds");     __err_panic(err)


    } // if CASE_GEN_ALL_FILES == "Y" {


    //------------------------------------------------------------------------------
    CASE_INIT := fastjson.GetString(byteValues, "Base", "CASE_INIT")
    fmt.Printf("CASE_INIT = %s\n", CASE_INIT)
    if CASE_INIT == "Y" {

        p("********** CASE_INIT *********************")

        data["Results"]       = make(map[string]string)

        err = L.LoadDict2(byteValues, data, "Digital_Signage");   __err_panic(err)
        err = L.LoadDict2(byteValues, data, "User_Media"     );   __err_panic(err)

   
        err = L.LoadDict2(    byteValues, data, "Base_Ti");     __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "Um_Ds");       __err_panic(err)



        TotalDict := make(map[string]map[string]float64) 

        // 
        err = I.Init_Um2(json_go, byteValues,data,TotalDict,);  __err_panic(err)
        // err = L.Save_Data_Map(byteValues, "Paid_Slots"  , data ); __err_panic(err)

        err = L.Save_Data_Map(byteValues,       "Results"  , data ); __err_panic(err)
        err = L.LoadDict2(    byteValues, data, "Results");          __err_panic(err)
    

    } // if CASE_INIT == "Y" {

    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    CASE_DB_PRINT_ALL := fastjson.GetString(byteValues, "Base", "CASE_DB_PRINT_ALL")
    fmt.Printf("CASE_DB_PRINT_ALL = %s\n", CASE_DB_PRINT_ALL)

    if CASE_DB_PRINT_ALL == "Y" {
        p("********** CASE_DB_PRINT_ALL *********************")
    	L.Buckets(byteValues,dbFileName)
    }

    CASE_MAP_PRINT_ALL := fastjson.GetString(byteValues, "Base", "CASE_MAP_PRINT_ALL")
    if CASE_MAP_PRINT_ALL == "Y" {
        p("********** CASE_MAP_PRINT_ALL *********************")
        //err = L.Print_Map(byteValues,data,TotalDict,"City",);  __err_panic(err)
        err = L.Print_Map(json_go,data,);  __err_panic(err)
        p("***************************************************")
    }
    // //fmt.Println(data["City"])
    // err = L.Print_Map_Table(json_go,data,"City");  __err_panic(err)
    // err = L.Print_Map_Table(json_go,data,"Neighborhoods");  __err_panic(err)
    // err = L.Print_Map_Table(json_go,data,"Digital_Signage");  __err_panic(err)
    // //err = L.Print_Map_Table(json_go,data,"Paid_Slots");  __err_panic(err)
    // err = L.Print_Map_Table(json_go,data,"Base_Ti");  __err_panic(err)
    // err = L.Print_Map_Table(json_go,data,"User_Media");  __err_panic(err)
    err = L.Print_Map_Table(json_go,data,"Results");  __err_panic(err)


    p("***************************************************")
    p("**** main_1.go ENDED")
    return




}
